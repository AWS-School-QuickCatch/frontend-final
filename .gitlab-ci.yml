# .gitlab-ci.yml

# Define stages of the pipeline
stages:
  - build

# Job to build and push Docker image
build-and-push:
  stage: build
  image: node:16-alpine  # Specify Docker image to use for this job
  tags:
    - quickcatch-ci  # Specify the group runner tag
  variables:
    DOCKER_TLS_CERTDIR: ""
  services:
    - docker:19.03.12-dind  # Use Docker-in-Docker service for building Docker images
  before_script:
    - apk add --no-cache curl jq  # Install curl and jq for API requests
  script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY  # Log in to GitLab Container Registry
    - |
      TAGS=$(curl -s --header "PRIVATE-TOKEN: $CI_JOB_TOKEN" "https://$CI_SERVER_HOST/api/v4/projects/$CI_PROJECT_ID/registry/repositories/1/tags" |
      jq -r '.[].name | select(test("^[0-9]+\\.[0-9]+$"))' | sort -V)
      if [ -z "$TAGS" ]; then
        echo "No existing numeric tags found. Setting latest tag to 0.0"
        LATEST_TAG="0.0"
      else
        LATEST_TAG=$(echo "$TAGS" | tail -n 1)  # Get the latest numeric tag
      fi
      echo "Latest numeric tag: $LATEST_TAG"
      NEW_VERSION=$(( $(echo $LATEST_TAG | cut -d. -f1) + 1 )).0
      if [ "$LATEST_TAG" = "0.0" ]; then
        NEW_VERSION="1.0"
      fi
      echo "New tag: $NEW_VERSION"
    - docker build . -t $CI_REGISTRY_IMAGE/quickcatch/frontend:$NEW_VERSION  # Build Docker image with incremented tag
    - docker push $CI_REGISTRY_IMAGE/quickcatch/frontend:$NEW_VERSION  # Push Docker image to GitLab Container Registry
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'  # Execute only on pushes to the main branch
